morphlines : [
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : cloudsolr

    # Import all morphline commands in these java packages and their
    # subpackages. Other commands that may be present on the classpath are
    # not visible to this morphline.
    importCommands : ["org.kitesdk.**"]

    commands : [
      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
      { 
	  	java {
	  		imports : """
	  			import org.apache.kafka.connect.data.*;
	  			import org.kitesdk.morphline.base.*;
	  			import com.google.common.collect.*;
	  			import java.util.*;
	  			import com.github.epheatt.kafka.connect.morphlines.com.fasterxml.jackson.databind.*;
	  		"""
	  		code : """
	  			String attachment = (String)record.getFirstValue(Fields.ATTACHMENT_BODY);
	  			ObjectMapper mapper = new ObjectMapper();
    			JsonNode actualObj = mapper.readTree(attachment);
	  			record.removeAll(Fields.ATTACHMENT_BODY);
	  			record.put(Fields.ATTACHMENT_BODY,(JsonNode) mapper.convertValue(actualObj, JsonNode.class));
	  			logger.debug("attachment: {} for record: {}", attachment, record); // log to SLF4J
	  			return child.process(record); // pass record to next command in chain
	  		"""
	  	}
  	  }
  	  {	extractJsonPaths {
  	  		flatten : true
  	  		paths : {
  	  			solr_name : /name
  	  		}
  	  	}
  	  }
      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
]