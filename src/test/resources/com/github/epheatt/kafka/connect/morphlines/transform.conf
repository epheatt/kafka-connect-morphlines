morphlines : [
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : transform

    # Import all morphline commands in these java packages and their
    # subpackages. Other commands that may be present on the classpath are
    # not visible to this morphline.
    importCommands : ["org.kitesdk.**", "com.github.epheatt.**"]

    commands : [
      # log the record at INFO level to SLF4J
      { logInfo { format : "input record: {}", args : ["@{}"] } }
      
      {
	  	fromConnectData {
	  		schemaField: _valueSchema
	  		valueField: _value
	  		converter: string
	  	}
	  }
	  {	readJson : { } }
	  {	extractJsonPaths {
  	  		flatten : true
  	  		paths : {
  	  			name : /name
  	  			topic : /config/topic
  	  		}
  	  	}
  	  }
	  {
	  	generateUUID {
	  		field : key
	  	}
	  }
	  {	
	  	setValues { 
	  		_attachment_body : """
	  			{"name":"@{name}","topic":"@{topic}","key":"@{key}"}
	  		"""
  		}
	  }
	  
	  {
	  	toString {
	  		field: _attachment_body
	  		trim : true
	  	}
	  }
      
	  {
	  	toConnectData {
	  		schemaField: _valueSchema
	  	}
	  }

      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : enrichjson

    # Import all morphline commands in these java packages and their
    # subpackages. Other commands that may be present on the classpath are
    # not visible to this morphline.
    importCommands : ["org.kitesdk.**", "com.github.epheatt.**"]

    commands : [
      # log the record at INFO level to SLF4J
      { logInfo { format : "input record: {}", args : ["@{}"] } }
	  {
		fromConnectData {
			schemaField: _valueSchema
			valueField: _value
			converter: json
		}
	  }
	  # read the JSON blob
	  { readJson: {} }
	  { logDebug { format : "read json record: {}", args : ["@{}"] } }
	  {
        setValues {
            topic : "@{_topic}-avro"
            subject : "@{_topic}-avro-value"
         }
      }
      {
  		enrichJson {
  			#schema-registry-url : ${?CONNECT_SCHEMA_REGISTRY_URL}
  			schemaString : """
                {"type":"record","name":"ConnectDefault","namespace":"io.confluent.connect.avro","fields":[{"name":"dont","type":["null","string"],"default":null},{"name":"abc","type":"int"},{"name":"foo","type":"boolean"},{"name":"etc","type":["null","string"],"default":null},{"name":"missing","type":["null","string"],"default":null}]}
            """
  			subjectField : subject
  			valueField : _attachment_body
  		}
  	  }
  	  { logDebug { format : "enriched json : {}", args : ["@{}"] } }
      {
        toConnectData {
  			schemaString : """
                {"type":"record","name":"ConnectDefault","namespace":"io.confluent.connect.avro","fields":[{"name":"dont","type":["null","string"],"default":null},{"name":"abc","type":"int"},{"name":"foo","type":"boolean"},{"name":"etc","type":["null","string"],"default":null},{"name":"missing","type":["null","string"],"default":null}]}
            """
            valueField: _attachment_body
        }
      }
      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : drop

    # Import all morphline commands in these java packages and their
    # subpackages. Other commands that may be present on the classpath are
    # not visible to this morphline.
    importCommands : ["org.kitesdk.**", "com.github.epheatt.**"]

    commands : [
      # log the record at INFO level to SLF4J
      { logInfo { format : "input record: {}", args : ["@{}"] } }

	  { dropRecord {} }

      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }  
]