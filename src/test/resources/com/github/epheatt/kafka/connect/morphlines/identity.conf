morphlines : [
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : noop

    # Import all morphline commands in these java packages and their
    # subpackages. Other commands that may be present on the classpath are
    # not visible to this morphline.
    importCommands : ["org.kitesdk.**", "com.github.epheatt.**"]

    commands : [
      # log the record at INFO level to SLF4J
      { logInfo { format : "input record: {}", args : ["@{}"] } }
      
      {
	  	fromConnectData {
	  		schemaField: _valueSchema
	  		valueField: _value
	  	}
	  }
	  {
	  	generateUUID {
	  		field : key
	  	}
	  }
	  {	
	  	setValues { 
	  		topic : "@{_topic}-copy"
	  		value : "test"
  		}
	  }

      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : readavro

    # Import all morphline commands in these java packages and their
    # subpackages. Other commands that may be present on the classpath are
    # not visible to this morphline.
    importCommands : ["org.kitesdk.**", "com.github.epheatt.**"]

    commands : [
      # log the record at INFO level to SLF4J
      { logInfo { format : "input record: {}", args : ["@{}"] } }
      
      {
	  	fromConnectData {
	  		schemaField: _valueSchema
	  		valueField: _value
	  	}
	  }
	  
	  {	extractAvroPaths {
  	  		flatten : true
  	  		paths : {
  	  			first_name : /firstName
  	  			last_name : /lastName
  	  			email_x : /email
  	  			age_x : /age
  	  		}
  	  	}
  	  }
	  
	  {	
	  	setValues { 
	  		firstName : "@{first_name}"
	  		lastName : "@{last_name}"
	  		email : "@{email_x}"
	  		age : "@{age_x}"
  		}
	  }
	  
	  {
	  	toAvro {
	  		schemaField: _valueSchemaAvro
	  	}
	  }
      
	  {
	  	toConnectData {
	  		schemaField: _valueSchema
	  	}
	  }

      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : readjson

    # Import all morphline commands in these java packages and their
    # subpackages. Other commands that may be present on the classpath are
    # not visible to this morphline.
    importCommands : ["org.kitesdk.**", "com.github.epheatt.**"]

    commands : [
      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
	  {
	  	fromConnectData {
	  		schemaField: _valueSchema
	  		valueField: _value
	  		converter: json
	  	}
	  }
	  {	readJson : { } }
	  {	extractJsonPaths {
  	  		flatten : true
  	  		paths : {
  	  			first_name : /firstName
  	  			last_name : /lastName
  	  			email_x : /email
  	  			age_x : /age
  	  		}
  	  	}
  	  }
	  
	  {
	  	toConnectData {
	  		schemaField: _valueSchema
	  		mappings: {
	  		  	firstName : first_name
  	  			lastName : last_name
  	  			email : email_x
  	  			age : age_x
	  		}
	  	}
	  }

      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : readline

    # Import all morphline commands in these java packages and their
    # subpackages. Other commands that may be present on the classpath are
    # not visible to this morphline.
    importCommands : ["org.kitesdk.**", "com.github.epheatt.**"]

    commands : [
      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
      {
	  	fromConnectData {
	  		schemaField: _valueSchema
	  		valueField: _value
	  		converter: string
	  	}
	  }
	  {	readJson : { } }
	  {	extractJsonPaths {
  	  		flatten : true
  	  		paths : {
  	  			first_name : /firstName
  	  			last_name : /lastName
  	  			email : /email
  	  			age : /age
  	  		}
  	  	}
  	  }
	  
	  {	
	  	setValues { 
	  		_attachment_body : """
	  			{"firstName":"@{first_name}","lastName":"@{last_name}","email":"@{email}","age":@{age}}
	  		"""
  		}
	  }
	  
	  {
	  	toString {
	  		field: _attachment_body
	  		trim : true
	  	}
	  }
      
	  {
	  	toConnectData {
	  		schemaField: _valueSchema
	  	}
	  }

      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }  
]